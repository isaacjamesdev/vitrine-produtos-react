   ---React---
	-Ao criar um CustomComponent ele deve extender de Component
	-Função Render(){} - renderizar, construir html page
	-class vs className

---


*Atualização de estado
	-Mudou de estado ? renderiza! MÉTODO SetStates. (se tiver dentro do ajax, o escopo do this é o do ajax. É preciso usar o bind(this) p/ mudar pro escopo do react
	-Colocar 'key' no element. ex.: key = {autor.id}, para react saber o que precisa mudar. 


*Form Dinâmico (keep in mind, é um Virtual DOM)
	-o VALUE dos input tem q tá associado ao this.state.attribute. isso se faz com o bind.

-Components
	-render()
	--IMPORTANTE: Funcões declaradas no componente, não vem com o 'this' por default. O this dela precisa ser declarado no constructor
	-State é uma variável que já vem 'Component'
	-exporta-o, extend 'Componnt'.
	-Parametros com o props.
	-ComponentDidMout()
	-ComponentWillMount()
	-(high Order Content) AutorBox. Usado para acoplar vários componentes na hora de exportar. para que eles fiquem vinculados.
	-Wrapper, envelopador de componentes
	-(REFLETIR) callback por parametros para os componentes, diminuir acoplamente atraves dos componentes (Isso é substituído pelo subscribe)
	---Malaquisse---
	-Spread Operator 
----- Publish Subscribe (pubsub-js)
	-Padrão publish Subscribe; Usa-se o módulo Pub-sub do npm. 
	-Método publish('tópico', 'obj q ta sendo alterado')
	-Método subscribe('topico', function('topico', 'obj q ta sendo alterado'){}

-----Tratar Erros
	-Criei Class, fiz uma função, alterei estados(span) dos inputs
	-limpei o form no success
	-alterei estado do span ao preencher o field

----React-Router-dom (nome já diz né..., tem alguns problemas aí por conta do curso ser antigo)
	-Esse módulo não exporta por default, precisa especificar o que quer {Router, Route}
	-importar {Link} from react-router. nas tags de link, mudar o 'href' por 'link to' e '<a>' por '<link>' (dessa forma muda a url mas não faz requisição)
	-Precisa do switch
	***
	-{BrowserHistory} -Não peguei ainda-
	-<children> - não peguei ainda
	***
	-{IndexRouter} para definir url padrão

----Finais
	-spread operatos	
	-Build para versão final da aplicação, pushstater
	-
	

----Pesquisar Mais----
	-React Lifecycle
	-DOM virtual
	-Componentes
	-react toolbox
	-js.coach
**Pesquisar por fora para aprender
	-React-Router
	-Children


---React II---

Component
	-componentWillProps()
-Fetch API
	-promisses e v�rios then, then, catch
	-JWT
	-usar isso para redirecionamento no submit: (programa��o program�tica) this.props.history.push("/timeline");
-Router
	-parametro exact
	-Route <onEnter={callback}
	-Parametro opicional no Route. path:"timeline(/:login)"

---Para Atualizar:
	-<route onEnter={}>, se liga nisso doid�o
---Pesquisar mais:
	-JWT
	-react-router-dom
	-.history. resgatar parametros e tals
	-Router
	-Ciclo de vidas
	*Coloca um atributo no 'State' somente quando eu quero ficar alterando e renderizando o valor dele
	-proerties short rend
	-presentationContainer e ComponentContainer

---Refatoração
	-É importante separar lógica dos componentes. Na lógica, não deve ficar nada relacionado ao react. tudo deve ser recebido como parametro.
	-Mudar estratégia de pubSub
---Sites de Documentação
	-Pattern Flux (Como falamos na aula, o Flux é um design pattern que tem como objetivo descrever melhor o fluxo dos dados na nossa aplicação.
				O uso de qualquer implementação dele, teoricamente, faz com que nós saibamos onde devemos olhar em relação as lógicas de view e negócio
				dentro do nosso projeto. Quando acontece um clique no botão, qual é o caminho percorrido até a execução da lógica? Esse tipo de situação
				fica mais fácil de ser analisada.)
			-Existem alguns sub-padrão: 'mobx', 'redux', 'nuclear'
	-'REDUCER' - Função redutora (state, action)
	-store.getState()
	-A função dispatch recebe um json, ele é passado para a função redutora, no caso a timeline().
	  nesse json, tem o type. informações além do type, são chamada de payload
	  -- trabalhando com redux:

		-cria a 'const 'store'' usando createStore('funçãoRedutora'); //passando como argumento a função redutora
		-essa funçaõ redutora recebe dois parametros(state, action). action é um json. que tem 'type'. tudo além de type, é chamado de payload.
		-passa essa 'store' como props no componente da chamado
		-nesse componente, na função willMout, deve se usar o método subscribe. Não passa objetos de estados, 
			pois o store não sabe com que tipo de dado você vai lidar. Em vez disso, passa uma function sem argumentos, que dentro dela retorna um
			this.setState({foo: this.props.store.getState()}). - Esse getState, retorna o ultimo valor do ultimo estado que foi retornado lá na função
			redutora. 
		-Para chamar a função redutora, usa-se a função dispatch({action: '', foo: bar})

-Entender o fluxo do Redux:
	-cria função funçãoRedutora-
	-cria o store com CreateStore(funçãoRedutora)
	-passa o store na props do componente
	-função getState pode ser usada no Willmout, trazendo o ultimo estado que foi lançado do store. (precisa ter estados do component ser montado,
		pra ser usado quando ele tiver montado ne! dãaawn)
	-o Meu componente vai chamar um função da api do seu componente usando o dispatch(ComponentApi.função(parametros necessários)).
		lá nessa função é retornado uma função com argumento 'dispatch', que é pra fazer era pra fazer. 
		para isso rolar, precisa do ThunkMiddleware (redux-thunk). e precisa aplicar esse ThunkMiddleware no parametro do createStore. antes disso,
		deve importar o componente ApplyMiddleware do Redux; Chama o ApplyMiddleware(ThunkMiddleware)
	
	*-Subpadrões do flux e Redux:
		-ActionCreator
	
	*-CombineReducers
		-usa o modulo CombineReducers. cria uma const 'reducers' usando o construtor(funcao1, funcao2)
		-no construtor do store, passa esse CombineReducers
		-agora, no getState().funcao1/funcao2
		ATENÇÃO: O componente tem que ficar ouvindo a Store
-ContextType
	-usa-se um módulo 'provider', que envolve todo os componentes. parametro passado pro priveder,
	-irar servir para os componentes filhos. <provider> components, components</provider>
	-variavel global do componente.dá se declarar que esse paramentro é obrigatório e tals. 

-IMMUTABLE
	-tá no bookMarks (e nos comentários)
	
	----LIBS que o mercado pede----
	-redux
	-IMMUTABLE

	-----
	*ELectrode (Para aplicações escaláveis. Código renderizado do lado do servidor)
	-para saber se estou no navegador?
		-const navegador typeOf window !== 'undefined';
		-explicação: window no servidor é uma variável não definida, logo é undefined. 
		se ñ vier undefined é pq está no navegador